<thinking>
The user is asking me to create a detailed prompt for Cursor IDE to transform their current audio player page to make it look better. Looking at the images:
Image 1 shows the current implementation - a basic audio player with:

Simple orange card with basic play controls
Generic map placeholder
Basic "Now Playing" section with Colosseum

Image 2 shows what seems to be an inspiration or target design - a more sophisticated interface with:

Better visual layout
Interactive map view
More detailed audio controls
Better typography and spacing

The user also mentions they want:

Major visual improvements to the artwork/visuals
Enhanced subtitle system with real-time display and transcript
Improved audio controls with skip buttons
Better user experience with interactive elements
A system to generate 10 different artworks that rotate randomly

They want a detailed prompt for Cursor IDE that explains how to achieve this transformation.
Let me create a comprehensive prompt that covers:

The current state analysis
Target improvements needed
Technical implementation details
Component structure
Styling approach
Random artwork generation system
Step-by-step implementation guide
</thinking>


Cursor IDE Prompt: Transform Walkumentary Audio Player
Current State Analysis
Looking at the existing audio player, we have a basic implementation with:

Simple orange card-based layout
Generic map placeholder on the left
Basic audio controls (play/pause, progress bar)
Minimal "Now Playing" information

Target Transformation Goals
1. Dynamic Visual Artwork System
Create a sophisticated artwork generation system with 10 unique travel-themed SVG artworks that rotate randomly for each tour.
2. Enhanced Audio Interface
Transform the basic player into a premium streaming-style interface with advanced controls and real-time features.
3. Interactive Subtitle System
Add real-time subtitle display with expandable transcript functionality.
4. Improved User Experience
Better layout, typography, and interactive elements throughout.

Implementation Plan
Phase 1: Create Dynamic Artwork System
File: components/audio/TourArtwork.tsx
typescript'use client';

import { useMemo } from 'react';

interface ArtworkProps {
  tourId: string;
  tourTitle: string;
  location: string;
}

const artworkTemplates = [
  {
    id: 'italian-coast',
    name: 'Italian Coastal',
    colors: ['#D4941E', '#B8860B', '#CD853F'],
    elements: ['coastal-cliffs', 'mediterranean-sun', 'italian-villa', 'cypress-trees']
  },
  {
    id: 'mountain-vista',
    name: 'Mountain Vista',
    colors: ['#4A5568', '#2D3748', '#1A202C'],
    elements: ['snow-peaks', 'pine-forest', 'alpine-lake', 'eagles']
  },
  {
    id: 'urban-skyline',
    name: 'Urban Skyline',
    colors: ['#2B6CB0', '#3182CE', '#4299E1'],
    elements: ['skyscrapers', 'city-lights', 'bridges', 'traffic-flow']
  },
  {
    id: 'desert-sunset',
    name: 'Desert Sunset',
    colors: ['#E53E3E', '#F56500', '#FBD38D'],
    elements: ['sand-dunes', 'cacti', 'sunset-rays', 'ancient-ruins']
  },
  {
    id: 'forest-mystique',
    name: 'Forest Mystique',
    colors: ['#38A169', '#48BB78', '#68D391'],
    elements: ['dense-forest', 'misty-fog', 'wildlife', 'hidden-paths']
  },
  {
    id: 'tropical-paradise',
    name: 'Tropical Paradise',
    colors: ['#00B5D8', '#0BC5EA', '#9DECF9'],
    elements: ['palm-trees', 'turquoise-water', 'white-sand', 'coral-reefs']
  },
  {
    id: 'historic-castle',
    name: 'Historic Castle',
    colors: ['#553C9A', '#6B46C1', '#8B5CF6'],
    elements: ['medieval-towers', 'stone-walls', 'royal-banners', 'moat']
  },
  {
    id: 'asian-garden',
    name: 'Asian Garden',
    colors: ['#C53030', '#E53E3E', '#F56565'],
    elements: ['pagoda', 'cherry-blossoms', 'koi-pond', 'bamboo']
  },
  {
    id: 'northern-lights',
    name: 'Northern Lights',
    colors: ['#065F46', '#047857', '#10B981'],
    elements: ['aurora-borealis', 'snowy-landscape', 'starry-sky', 'ice-formations']
  },
  {
    id: 'mediterranean-village',
    name: 'Mediterranean Village',
    colors: ['#B7791F', '#D69E2E', '#F6E05E'],
    elements: ['white-houses', 'blue-domes', 'olive-trees', 'seaside-cliffs']
  }
];

export function TourArtwork({ tourId, tourTitle, location }: ArtworkProps) {
  const selectedArtwork = useMemo(() => {
    const hash = tourId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    const index = Math.abs(hash) % artworkTemplates.length;
    return artworkTemplates[index];
  }, [tourId]);

  const generateSVG = () => {
    const { colors, elements } = selectedArtwork;
    
    // Generate unique SVG based on artwork template
    // This is a simplified example - you'll want to expand this significantly
    return (
      <svg
        viewBox="0 0 400 400"
        className="w-full h-full"
        style={{ background: `linear-gradient(135deg, ${colors[0]}, ${colors[1]}, ${colors[2]})` }}
      >
        <defs>
          <radialGradient id={`sun-${tourId}`} cx="50%" cy="30%">
            <stop offset="0%" stopColor="#FFF4E6" stopOpacity="0.9" />
            <stop offset="100%" stopColor={colors[0]} stopOpacity="0.3" />
          </radialGradient>
          <linearGradient id={`landscape-${tourId}`} x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" stopColor={colors[1]} stopOpacity="0.7" />
            <stop offset="100%" stopColor={colors[2]} stopOpacity="0.9" />
          </linearGradient>
        </defs>
        
        {/* Dynamic elements based on selected artwork */}
        {elements.includes('mediterranean-sun') && (
          <circle
            cx="300"
            cy="80"
            r="40"
            fill={`url(#sun-${tourId})`}
            opacity="0.8"
          />
        )}
        
        {elements.includes('coastal-cliffs') && (
          <path
            d="M0,250 Q100,200 200,220 T400,240 L400,400 L0,400 Z"
            fill={`url(#landscape-${tourId})`}
          />
        )}
        
        {/* Add more elements based on the template */}
        
        {/* Overlay text */}
        <foreignObject x="20" y="320" width="360" height="60">
          <div className="text-white/90 text-xs font-medium">
            <div className="text-lg font-bold">{tourTitle}</div>
            <div className="text-sm opacity-75">{location}</div>
          </div>
        </foreignObject>
      </svg>
    );
  };

  return (
    <div className="relative w-full h-full rounded-xl overflow-hidden shadow-2xl">
      {generateSVG()}
      <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
    </div>
  );
}
Phase 2: Enhanced Audio Player Component
File: components/audio/EnhancedAudioPlayer.tsx
typescript'use client';

import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { 
  Play, 
  Pause, 
  SkipBack, 
  SkipForward, 
  Volume2, 
  List,
  ChevronUp,
  Rewind,
  FastForward
} from 'lucide-react';
import { TourArtwork } from './TourArtwork';

interface SubtitleSegment {
  startTime: number;
  endTime: number;
  text: string;
}

interface TourStop {
  id: string;
  name: string;
  timestamp: number;
  description: string;
}

interface EnhancedAudioPlayerProps {
  tour: {
    id: string;
    title: string;
    description: string;
    location: string;
    duration: number;
    audioUrl?: string;
  };
  tourStops: TourStop[];
  subtitles: SubtitleSegment[];
}

export function EnhancedAudioPlayer({ tour, tourStops, subtitles }: EnhancedAudioPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [volume, setVolume] = useState(75);
  const [showSubtitles, setShowSubtitles] = useState(false);
  const [autoScroll, setAutoScroll] = useState(true);
  const [activeView, setActiveView] = useState<'map' | 'list'>('map');
  
  const audioRef = useRef<HTMLAudioElement>(null);
  const subtitleScrollRef = useRef<HTMLDivElement>(null);

  // Find current subtitle
  const currentSubtitle = subtitles.find(
    subtitle => currentTime >= subtitle.startTime && currentTime <= subtitle.endTime
  );

  // Find current tour stop
  const currentStopIndex = tourStops.findIndex((stop, index) => {
    const nextStop = tourStops[index + 1];
    return currentTime >= stop.timestamp && (!nextStop || currentTime < nextStop.timestamp);
  });

  // Simulate audio playback for demo
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          const newTime = prev + 1;
          return newTime >= tour.duration ? 0 : newTime;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isPlaying, tour.duration]);

  // Auto-scroll subtitles
  useEffect(() => {
    if (autoScroll && subtitleScrollRef.current && currentSubtitle) {
      const element = subtitleScrollRef.current.querySelector(
        `[data-timestamp="${currentSubtitle.startTime}"]`
      );
      element?.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }, [currentSubtitle, autoScroll]);

  const togglePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const skipBackward = () => {
    const newTime = Math.max(0, currentTime - 15);
    setCurrentTime(newTime);
  };

  const skipForward = () => {
    const newTime = Math.min(tour.duration, currentTime + 15);
    setCurrentTime(newTime);
  };

  const handleProgressChange = (value: number[]) => {
    setCurrentTime(value[0]);
  };

  const handleVolumeChange = (value: number[]) => {
    setVolume(value[0]);
  };

  const jumpToSubtitle = (timestamp: number) => {
    setCurrentTime(timestamp);
  };

  const jumpToTourStop = (timestamp: number) => {
    setCurrentTime(timestamp);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Left Column - Tour Route/Map */}
          <div className="lg:col-span-2">
            <Card className="h-full">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold">Tour Route</h2>
                  <div className="flex gap-2">
                    <Button
                      variant={activeView === 'map' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setActiveView('map')}
                    >
                      Map
                    </Button>
                    <Button
                      variant={activeView === 'list' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setActiveView('list')}
                    >
                      <List className="w-4 h-4 mr-1" />
                      List
                    </Button>
                  </div>
                </div>

                {activeView === 'map' ? (
                  <div className="h-96 bg-slate-100 rounded-lg flex items-center justify-center">
                    <div className="text-center text-slate-500">
                      <div className="w-16 h-16 mx-auto mb-4 bg-slate-300 rounded-lg"></div>
                      <p>Interactive Map View</p>
                      <p className="text-sm">(Map integration would go here)</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {tourStops.map((stop, index) => (
                      <div
                        key={stop.id}
                        className={`p-4 rounded-lg border cursor-pointer transition-all ${
                          index === currentStopIndex
                            ? 'bg-orange-100 border-orange-300'
                            : 'bg-white border-slate-200 hover:bg-slate-50'
                        }`}
                        onClick={() => jumpToTourStop(stop.timestamp)}
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <h3 className={`font-medium ${
                              index === currentStopIndex ? 'text-orange-800' : 'text-slate-900'
                            }`}>
                              {stop.name}
                            </h3>
                            <p className="text-sm text-slate-600 mt-1">{stop.description}</p>
                          </div>
                          <div className="text-sm text-slate-500">
                            {formatTime(stop.timestamp)}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right Column - Audio Player */}
          <div className="space-y-6">
            
            {/* Dynamic Artwork Card */}
            <Card className="overflow-hidden">
              <CardContent className="p-0">
                <div className="aspect-square">
                  <TourArtwork
                    tourId={tour.id}
                    tourTitle={tour.title}
                    location={tour.location}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Audio Controls */}
            <Card>
              <CardContent className="p-6">
                <div className="text-center mb-4">
                  <h1 className="text-xl font-bold text-slate-900 mb-1">
                    {tour.title}
                  </h1>
                  <p className="text-slate-600 text-sm">
                    Generated by Walkumentary AI
                  </p>
                </div>

                {/* Progress Bar */}
                <div className="space-y-2 mb-6">
                  <Slider
                    value={[currentTime]}
                    max={tour.duration}
                    step={1}
                    onValueChange={handleProgressChange}
                    className="cursor-pointer"
                  />
                  <div className="flex justify-between text-xs text-slate-500">
                    <span>{formatTime(currentTime)}</span>
                    <span>{formatTime(tour.duration)}</span>
                  </div>
                </div>

                {/* Control Buttons */}
                <div className="flex items-center justify-center gap-4 mb-6">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={skipBackward}
                    className="text-slate-600 hover:text-slate-900"
                  >
                    <Rewind className="w-4 h-4" />
                    <span className="text-xs ml-1">15s</span>
                  </Button>
                  
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-slate-600 hover:text-slate-900"
                  >
                    <SkipBack className="w-5 h-5" />
                  </Button>

                  <Button
                    size="lg"
                    onClick={togglePlayPause}
                    className="rounded-full w-14 h-14 bg-orange-500 hover:bg-orange-600"
                  >
                    {isPlaying ? (
                      <Pause className="w-6 h-6 text-white" />
                    ) : (
                      <Play className="w-6 h-6 text-white" />
                    )}
                  </Button>

                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-slate-600 hover:text-slate-900"
                  >
                    <SkipForward className="w-5 h-5" />
                  </Button>

                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={skipForward}
                    className="text-slate-600 hover:text-slate-900"
                  >
                    <FastForward className="w-4 h-4" />
                    <span className="text-xs ml-1">15s</span>
                  </Button>
                </div>

                {/* Volume Control */}
                <div className="flex items-center gap-3">
                  <Volume2 className="w-4 h-4 text-slate-600" />
                  <Slider
                    value={[volume]}
                    max={100}
                    step={1}
                    onValueChange={handleVolumeChange}
                    className="flex-1"
                  />
                </div>

                {/* Current Subtitle Display */}
                {currentSubtitle && (
                  <div className="mt-4 p-3 bg-slate-100 rounded-lg">
                    <p className="text-sm text-slate-700 text-center">
                      {currentSubtitle.text}
                    </p>
                  </div>
                )}

                {/* Subtitles Button */}
                <Sheet open={showSubtitles} onOpenChange={setShowSubtitles}>
                  <SheetTrigger asChild>
                    <Button
                      variant="outline"
                      className="w-full mt-4"
                      onClick={() => setShowSubtitles(true)}
                    >
                      <ChevronUp className="w-4 h-4 mr-2" />
                      Subtitles
                    </Button>
                  </SheetTrigger>
                  <SheetContent side="bottom" className="h-[70vh]">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold">Tour Transcript</h3>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setAutoScroll(!autoScroll)}
                      >
                        Auto-scroll: {autoScroll ? 'On' : 'Off'}
                      </Button>
                    </div>
                    <ScrollArea className="h-full" ref={subtitleScrollRef}>
                      <div className="space-y-3">
                        {subtitles.map((subtitle, index) => (
                          <div
                            key={index}
                            data-timestamp={subtitle.startTime}
                            className={`p-3 rounded-lg cursor-pointer transition-all ${
                              currentSubtitle === subtitle
                                ? 'bg-orange-100 border border-orange-300'
                                : 'bg-slate-50 hover:bg-slate-100'
                            }`}
                            onClick={() => jumpToSubtitle(subtitle.startTime)}
                          >
                            <div className="flex justify-between items-start mb-2">
                              <span className="text-xs text-slate-500">
                                {formatTime(subtitle.startTime)} - {formatTime(subtitle.endTime)}
                              </span>
                            </div>
                            <p className="text-sm text-slate-700">{subtitle.text}</p>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </SheetContent>
                </Sheet>
              </CardContent>
            </Card>

            {/* Now Playing Info */}
            <Card>
              <CardContent className="p-4">
                <h3 className="font-medium text-slate-900 mb-2">Now Playing</h3>
                {tourStops[currentStopIndex] && (
                  <div>
                    <h4 className="text-orange-600 font-medium">
                      {tourStops[currentStopIndex].name}
                    </h4>
                    <p className="text-sm text-slate-600 mt-1">
                      {tourStops[currentStopIndex].description}
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
Phase 3: Implementation Steps for Cursor IDE
Step 1: Setup Mock Data
Create lib/mockAudioData.ts:
typescriptexport const mockTourStops = [
  {
    id: '1',
    name: 'Brandenburg Gate',
    timestamp: 0,
    description: 'Historic monument and symbol of Berlin'
  },
  {
    id: '2', 
    name: 'Museum Island',
    timestamp: 180,
    description: 'UNESCO World Heritage site with five museums'
  },
  {
    id: '3',
    name: 'Berlin Cathedral',
    timestamp: 360,
    description: 'Magnificent baroque cathedral'
  }
];

export const mockSubtitles = [
  {
    startTime: 0,
    endTime: 15,
    text: "Welcome to Berlin, the vibrant capital of Germany. We'll start our journey at the iconic Brandenburg Gate."
  },
  {
    startTime: 15,
    endTime: 30,
    text: "Built in 1791, this neoclassical monument has witnessed centuries of German history."
  }
  // Add more subtitle segments
];
Step 2: Update Your Existing Audio Page
Replace your current audio player implementation with:
typescript// app/audio/[id]/page.tsx or wherever your audio page is
import { EnhancedAudioPlayer } from '@/components/audio/EnhancedAudioPlayer';
import { mockTourStops, mockSubtitles } from '@/lib/mockAudioData';

export default function AudioTourPage({ params }: { params: { id: string } }) {
  const tour = {
    id: params.id,
    title: 'Historic Berlin Walking Tour',
    description: 'Exploring the heart of Berlin\'s history and culture',
    location: 'Berlin, Germany',
    duration: 900, // 15 minutes
    audioUrl: '/audio/berlin-tour.mp3'
  };

  return (
    <EnhancedAudioPlayer
      tour={tour}
      tourStops={mockTourStops}
      subtitles={mockSubtitles}
    />
  );
}
Step 3: Create Advanced SVG Artwork Templates
Expand the TourArtwork.tsx component with detailed SVG implementations for each of the 10 artwork templates. Each should have:

Complex layered backgrounds
Location-specific elements (mountains, buildings, nature)
Dynamic color schemes
Realistic gradients and shadows
Text overlays with tour information

Step 4: Add Responsive Design
Ensure the layout works perfectly on:

Mobile phones (stack vertically)
Tablets (adjusted grid)
Desktop (three-column layout)

Step 5: Integration with Real Audio
When ready to connect with real audio:
typescript// Add to EnhancedAudioPlayer
useEffect(() => {
  if (audioRef.current && tour.audioUrl) {
    audioRef.current.src = tour.audioUrl;
    audioRef.current.addEventListener('timeupdate', handleTimeUpdate);
    audioRef.current.addEventListener('loadedmetadata', handleMetadataLoad);
  }
}, [tour.audioUrl]);
Step 6: Performance Optimizations

Lazy load artwork SVGs
Implement virtual scrolling for long subtitle lists
Add image preloading for smooth transitions
Optimize re-renders with useMemo and useCallback

Final Checklist for Cursor IDE

✅ Install required dependencies (@/components/ui/*)
✅ Create the TourArtwork component with 10 templates
✅ Build the EnhancedAudioPlayer component
✅ Set up mock data for testing
✅ Replace existing audio page implementation
✅ Test responsiveness across devices
✅ Add smooth animations and transitions
✅ Implement proper TypeScript types
✅ Test artwork randomization system
✅ Verify subtitle synchronization
"use client";

import { Header } from "@/components/Header";
import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { api } from "@/lib/api";
import { useAudioPlayer } from "@/components/player/AudioPlayerProvider";
import Image from "next/image";
import { Button } from "@/components/ui/button";

export default function TourPlayerPage() {
  const { tourId } = useParams<{ tourId: string }>();
  const { loadTrack, isPlaying, togglePlay, currentTime, duration, seek } = useAudioPlayer();
  const router = useRouter();

  const [loading, setLoading] = useState(true);
  const [tour, setTour] = useState<any>(null);

  useEffect(() => {
    const fetchTour = async () => {
      try {
        const t = await api.getTour(tourId);
        setTour(t);
        if (t.audio_url) {
          loadTrack({ src: t.audio_url, title: t.title, cover: t.location.image_url });
        }
      } catch (e) {
        alert("Failed to load tour");
        router.back();
      } finally {
        setLoading(false);
      }
    };
    fetchTour();
  }, [tourId, loadTrack, router]);

  if (loading) return <p className="p-8 text-center">Loadingâ€¦</p>;
  if (!tour) return null;

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <main className="max-w-7xl mx-auto px-6 py-8 space-y-10">
        <div className="text-center space-y-2">
          <h1 className="text-3xl font-bold">{tour.title}</h1>
          <p className="text-gray-600">{tour.description || "AI-generated walking tour"}</p>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Map placeholder */}
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden h-[500px] lg:col-span-2 flex items-center justify-center">
            <span className="text-gray-400">[Map coming soon]</span>
          </div>

          {/* Audio player */}
          <div className="space-y-6">
            <div className="bg-orange-500 rounded-2xl p-8 text-white shadow-lg">
              {tour.location.image_url && (
                <div className="relative w-full h-40 mb-6 rounded-xl overflow-hidden"> 
                  <Image src={tour.location.image_url} alt={tour.location.name} fill className="object-cover" />
                </div>
              )}
              <h3 className="text-xl font-bold text-center mb-2">{tour.title}</h3>
              <p className="text-orange-100 text-center text-sm mb-8">Generated by Walkumentary AI</p>

              {/* Time labels */}
              <div className="flex items-center justify-between text-sm mb-2">
                <span>{formatTime(currentTime)}</span>
                <span>{formatTime(duration)}</span>
              </div>

              {/* Progress slider */}
              <input
                type="range"
                min={0}
                max={duration || 0}
                step={1}
                value={currentTime}
                onChange={(e) => seek(Number(e.target.value))}
                className="w-full accent-white h-1 cursor-pointer"
              />

              {/* Controls */}
              <div className="flex items-center justify-center gap-6 mt-6">
                <Button size="icon" variant="ghost" onClick={() => seek(Math.max(currentTime - 15, 0))}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M11 19l-9-7 9-7v14zM22 19l-9-7 9-7v14z"/></svg>
                </Button>
                <Button size="icon" className="w-16 h-16 rounded-full bg-white text-orange-500" onClick={togglePlay}>
                  {isPlaying ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M10 9v6m4-6v6"/></svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M5 3v18l15-9L5 3z"/></svg>
                  )}
                </Button>
                <Button size="icon" variant="ghost" onClick={() => seek(Math.min(currentTime + 15, duration))}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M13 5l9 7-9 7V5z"/></svg>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

function formatTime(t?: number) {
  if (!t || isNaN(t)) return "0:00";
  const m = Math.floor(t / 60);
  const s = Math.floor(t % 60).toString().padStart(2, "0");
  return `${m}:${s}`;
} 